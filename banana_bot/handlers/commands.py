# handlers/commands.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
import asyncio
from typing import Dict

from banana_bot.storage.db import DB
from banana_bot.game.logic import (
    apply_offline_gain,
    cost_for_upgrade,
    effective_per_click,
    GOLD_DURATION,
    has_active_gold
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
router = Router()
db = DB()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def ensure_and_update_offline(user_id: int, username: str):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–Ω–∞–≥—Ä–∞–¥—É."""
    db.create_user_if_not_exists(user_id, username)
    user = db.get_user(user_id)
    if not user:
        raise RuntimeError("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    apply_offline_gain(user_id)
    return db.get_user(user_id)


def profile_text(user: Dict) -> str:
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['username']}\n\n"
        f"üçå –ë–∞–Ω–∞–Ω—ã: {user['bananas']}\n"
        f"üñ± –ó–∞ –∫–ª–∏–∫: {user['per_click']}\n"
        f"‚öôÔ∏è –ü–∞—Å—Å–∏–≤–Ω–æ: {user['per_second']} / —Å–µ–∫\n"
    )
    if has_active_gold(user):
        text += "‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω!\n"
    return text


def shop_text(user: Dict) -> str:
    return (
        f"üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['bananas']} üçå\n"
        f"1Ô∏è‚É£ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–ª–∏–∫–∏ (+1) ‚Äî {cost_for_upgrade('click', user['upgrades'].get('click', 0))} üçå\n"
        f"2Ô∏è‚É£ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–∞—Å—Å–∏–≤ (+1/—Å–µ–∫) ‚Äî {cost_for_upgrade('collector', user['upgrades'].get('collector', 0))} üçå\n"
        f"3Ô∏è‚É£ –ö—É–ø–∏—Ç—å –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω ‚ú® ‚Äî {cost_for_upgrade('gold', user['upgrades'].get('gold', 0))} üçå\n"
    )


def shop_keyboard(user: Dict):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ± –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫", callback_data="buy_click")],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä—â–∏–∫", callback_data="buy_collector")],
        [InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω", callback_data="buy_gold")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ", callback_data="rebirth")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="profile")]
    ])


def reset_user_progress(self, user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∞–Ω–∞–Ω—ã, –∫–ª–∏–∫–∏ –∏ –ø–∞—Å—Å–∏–≤ –¥–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    self.update_user(user_id, bananas=0, per_click=1, per_second=0, upgrades={})

def add_gold_banana(self, user_id: int, count: int = 1):
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–æ–ª–æ—Ç—ã—Ö –±–∞–Ω–∞–Ω–æ–≤ (—É—Å–ª–æ–≤–Ω–æ)"""
    user = self.get_user(user_id)
    upgrades = user['upgrades']
    upgrades['gold_banana'] = upgrades.get('gold_banana', 0) + count
    self.update_user(user_id, upgrades=upgrades)

def add_passive_clicks(self, user_id: int, count: int = 1):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–µ –∫–ª–∏–∫–∏"""
    user = self.get_user(user_id)
    self.update_user(user_id, per_second=user['per_second'] + count)



# --- –ö–æ–º–∞–Ω–¥—ã ---
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    ensure_and_update_offline(user_id, username)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçå –ö–ª–∏–∫–Ω—É—Ç—å", callback_data="click")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="üí∞ –ù–∞–∫—Ä—É—Ç–∏—Ç—å –±–∞–Ω–∞–Ω—ã", callback_data="cheat_bananas")]
    ])

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Banana Bot!\n–ù–∞–∫–ª–∏–∫–∞–π —Å–µ–±–µ –±–∞–Ω–∞–Ω—ã!", reply_markup=kb)


@router.message(Command("profile"))
async def profile_command(message: types.Message):
    user = ensure_and_update_offline(message.from_user.id, message.from_user.username)
    await message.answer(profile_text(user))


@router.message(Command("shop"))
async def shop_command(message: types.Message):
    user = ensure_and_update_offline(message.from_user.id, message.from_user.username)
    await message.answer(shop_text(user), reply_markup=shop_keyboard(user))


# --- Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã ---
@router.callback_query(F.data == "click")
async def cb_click(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    per_click = effective_per_click(user)
    db.update_user(query.from_user.id, bananas=user['bananas'] + per_click, last_update=time.time())
    user = db.get_user(query.from_user.id)

    text = f"üçå –ö–ª–∏–∫! +{per_click}\n\n–í—Å–µ–≥–æ: {user['bananas']} üçå\n–ó–∞ –∫–ª–∏–∫: {user['per_click']}\n–ü–∞—Å—Å–∏–≤: {user['per_second']}/—Å–µ–∫\n"
    if has_active_gold(user):
        text += "‚ú® –ê–∫—Ç–∏–≤–µ–Ω –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω (2√ó)\n"

    try:
        await query.message.edit_text(text, reply_markup=query.message.reply_markup)
    except Exception:
        await query.message.answer(text)


@router.callback_query(F.data == "profile")
async def cb_profile(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçå –ö–ª–∏–∫–Ω—É—Ç—å", callback_data="click")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ", callback_data="rebirth")]
    ])
    try:
        await query.message.edit_text(profile_text(user), reply_markup=kb)
    except Exception:
        await query.message.answer(profile_text(user), reply_markup=kb)


@router.callback_query(F.data == "shop")
async def cb_shop(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    try:
        await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))
    except Exception:
        await query.message.answer(shop_text(user), reply_markup=shop_keyboard(user))


# --- –ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫—É–ø–æ–∫ ---
@router.callback_query(F.data == "buy_click")
async def buy_click(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    lvl = user['upgrades'].get("click", 0)
    cost = cost_for_upgrade("click", lvl)
    if user['bananas'] < cost:
        await query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–Ω–∞–Ω–æ–≤ üò¢")
        return
    db.update_user(query.from_user.id,
                   bananas=user['bananas'] - cost,
                   per_click=user['per_click'] + 1,
                   upgrades={**user['upgrades'], "click": lvl + 1})
    user = db.get_user(query.from_user.id)
    try:
        await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))
    except Exception:
        pass


@router.callback_query(F.data == "buy_collector")
async def buy_collector(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    lvl = user['upgrades'].get("collector", 0)
    cost = cost_for_upgrade("collector", lvl)
    if user['bananas'] < cost:
        await query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–Ω–∞–Ω–æ–≤ üò¢")
        return
    db.update_user(query.from_user.id,
                   bananas=user['bananas'] - cost,
                   per_second=user['per_second'] + 1,
                   upgrades={**user['upgrades'], "collector": lvl + 1})
    user = db.get_user(query.from_user.id)
    try:
        await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))
    except Exception:
        pass


@router.callback_query(F.data == "buy_gold")
async def buy_gold(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    lvl = user['upgrades'].get("gold", 0)
    cost = cost_for_upgrade("gold", lvl)
    if user['bananas'] < cost:
        await query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–Ω–∞–Ω–æ–≤ üò¢")
        return
    gold_expires = max(time.time(), user.get("gold_expires", 0)) + GOLD_DURATION
    db.update_user(query.from_user.id,
                   bananas=user['bananas'] - cost,
                   upgrades={**user['upgrades'], "gold": lvl + 1},
                   gold_expires=gold_expires)
    await query.message.answer(f"‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {time.ctime(int(gold_expires))}")
    user = db.get_user(query.from_user.id)
    try:
        await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))
    except Exception:
        pass


# --- –ß–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞ ---
@router.callback_query(F.data == "cheat_bananas")
async def cheat_bananas(query: CallbackQuery):
    await query.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 1000 –±–∞–Ω–∞–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    db.update_user(query.from_user.id, bananas=user['bananas'] + 1000)
    user = db.get_user(query.from_user.id)
    try:
        await query.message.edit_text(profile_text(user), reply_markup=query.message.reply_markup)
    except Exception:
        await query.message.answer(profile_text(user))


# --- –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ ---
@router.callback_query(F.data == "rebirth")
async def rebirth_prompt(query: CallbackQuery):
    await query.answer()
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞", callback_data="confirm_rebirth")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="shop")
    await query.message.edit_text(
        "üîÅ –ì–æ—Ç–æ–≤—ã –ø–µ—Ä–µ—Ä–æ–¥–∏—Ç—å—Å—è? üéâ\n–í–∑–∞–º–µ–Ω –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "- –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω ‚ú®\n"
        "- +2 –∫ –ø–∞—Å—Å–∏–≤—É\n",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "confirm_rebirth")
async def confirm_rebirth(query: CallbackQuery):
    await query.answer()
    user_id = query.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    db.reset_user_progress(user_id)
    db.add_gold_banana(user_id, 1)
    db.add_passive_clicks(user_id, 2)

    # –ú–∏–Ω–∏-–∞–Ω–∏–º–∞—Ü–∏—è
    for msg in ["‚ú® –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ... üçå", "üåü –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ...", "üí´ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!"]:
        await query.message.edit_text(msg)
        await asyncio.sleep(1.2)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user = db.get_user(user_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
    builder.button(text="üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ", callback_data="rebirth")

    await query.message.edit_text(
        "üåü –í—ã –ø–µ—Ä–µ—Ä–æ–¥–∏–ª–∏—Å—å!\n\n"
        "ü•á –ü–æ–ª—É—á–µ–Ω 1 –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω!\n"
        "‚ûï –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ +2 üçå\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–∏—Ç–µ –ø—É—Ç—å –∑–∞–Ω–æ–≤–æ!",
        reply_markup=builder.as_markup()
    )
