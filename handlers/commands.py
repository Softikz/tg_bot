# handlers/commands.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_click)
@router.callback_query(F.data == "click")
async def handle_click(callback: CallbackQuery):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(callback.from_user.id)
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º
        db.create_user_if_not_exists(callback.from_user.id, callback.from_user.username or "unknown")
        user = db.get_user(callback.from_user.id)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    added, new_last = apply_offline_gain(user)
    if added:
        user["bananas"] += added
        user["last_update"] = new_last
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫
    per_click = effective_per_click(user)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    new_bananas = user['bananas'] + per_click
    db.update_user(
        callback.from_user.id, 
        bananas=new_bananas, 
        last_update=time.time()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    updated_user = db.get_user(callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üçå –ö–ª–∏–∫! +{per_click}\n\n"
        f"–í—Å–µ–≥–æ: {int(updated_user['bananas'])} üçå\n"
        f"–ó–∞ –∫–ª–∏–∫: {effective_per_click(updated_user)}\n"
        f"–ü–∞—Å—Å–∏–≤: {updated_user['per_second']}/—Å–µ–∫\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–∞—Ö
    boosts = []
    if has_active_gold(updated_user):
        remaining = int(updated_user.get("gold_expires", 0) - time.time())
        boosts.append(f"‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω (2√ó)")
    
    if has_active_event(updated_user):
        remaining = int(updated_user.get("event_expires", 0) - time.time())
        multiplier = updated_user.get("event_multiplier", 1.0)
        event_type = updated_user.get("event_type", "")
        boosts.append(f"üéØ {event_type} ({multiplier}√ó)")
    
    if boosts:
        text += "‚ö° " + " + ".join(boosts) + "\n"
    
    await callback.message.edit_text(text, reply_markup=main_menu_keyboard())
