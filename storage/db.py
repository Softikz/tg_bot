# storage/db.py
import sqlite3
import json
import time
import os
from typing import List, Dict

class DB:
    def __init__(self, path="/data/database.db"):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ–º /data/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞—Ö
        –í Railway /data/ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
        """
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(path), exist_ok=True)
        
        self.path = path
        self.conn = sqlite3.connect(self.path, check_same_thread=False)
        self.conn.row_factory = sqlite3.Row
        self.cur = self.conn.cursor()
        self._create_tables()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
        print(f"üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.path}")
        print(f"üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {os.path.getsize(self.path) if os.path.exists(self.path) else 0} –±–∞–π—Ç")

    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            bananas INTEGER DEFAULT 0,
            per_click INTEGER DEFAULT 1,
            per_second INTEGER DEFAULT 0,
            upgrades TEXT DEFAULT '{}',
            last_update REAL DEFAULT 0,
            gold_expires REAL DEFAULT 0,
            rebirths INTEGER DEFAULT 0,
            event_expires REAL DEFAULT 0,
            event_multiplier REAL DEFAULT 1.0,
            event_type TEXT DEFAULT ''
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤
        self.cur.execute("""
        CREATE TABLE IF NOT EXISTS active_events (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            event_type TEXT,
            multiplier REAL,
            expires_at REAL,
            created_at REAL DEFAULT (strftime('%s', 'now'))
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.cur.execute("""
        CREATE TABLE IF NOT EXISTS system_info (
            key TEXT PRIMARY KEY,
            value TEXT
        )
        """)
        
        self.conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")

    def create_user_if_not_exists(self, user_id, username):
        self.cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        if not self.cur.fetchone():
            self.cur.execute(
                "INSERT INTO users (user_id, username, upgrades, last_update) VALUES (?, ?, ?, ?)",
                (user_id, username, "{}", time.time())
            )
            self.conn.commit()
            print(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")

    def get_user(self, user_id) -> Dict:
        self.cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        row = self.cur.fetchone()
        if not row:
            return None
        user = dict(row)
        try:
            user["upgrades"] = json.loads(user.get("upgrades") or "{}")
        except Exception:
            user["upgrades"] = {}
        return user

    def update_user(self, user_id, **kwargs):
        if not kwargs:
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.conn.execute("BEGIN TRANSACTION")
        try:
            updates = []
            values = []
            for key, value in kwargs.items():
                if key == "upgrades":
                    value = json.dumps(value)
                updates.append(f"{key} = ?")
                values.append(value)
            values.append(user_id)
            
            query = f"UPDATE users SET {', '.join(updates)} WHERE user_id = ?"
            self.cur.execute(query, values)
            self.conn.commit()
            
        except Exception as e:
            self.conn.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise e

    def all_users(self) -> List[Dict]:
        self.cur.execute("SELECT * FROM users")
        rows = self.cur.fetchall()
        users = []
        for row in rows:
            user = dict(row)
            try:
                user["upgrades"] = json.loads(user.get("upgrades") or "{}")
            except Exception:
                user["upgrades"] = {}
            users.append(user)
        return users

    def get_all_users(self) -> List[Dict]:
        self.cur.execute("SELECT user_id, username FROM users")
        rows = self.cur.fetchall()
        return [{"user_id": r[0], "username": r[1]} for r in rows]

    def reset_user_progress(self, user_id: int):
        self.cur.execute("""
            UPDATE users
            SET bananas=0,
                per_click=1,
                per_second=0,
                upgrades='{}'
            WHERE user_id=?
        """, (user_id,))
        self.conn.commit()

    def add_gold_banana(self, user_id: int):
        user = self.get_user(user_id)
        if not user:
            return
        gold_expires = max(time.time(), user.get("gold_expires", 0)) + 86400
        self.update_user(user_id, gold_expires=gold_expires)

    def add_passive_clicks(self, user_id: int, amount: int = 2):
        user = self.get_user(user_id)
        if not user:
            return
        self.update_user(user_id, per_second=user.get("per_second", 0) + amount)

    def add_bananas(self, user_id: int, amount: int):
        user = self.get_user(user_id)
        if not user:
            return
        self.update_user(user_id, bananas=user.get("bananas", 0) + amount)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≤–µ–Ω—Ç–∞–º–∏
    def start_event_for_all_users(self, event_type: str, multiplier: float, duration_seconds: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        expires_at = time.time() + duration_seconds
        
        self.cur.execute("""
            UPDATE users 
            SET event_expires = ?, event_multiplier = ?, event_type = ?
        """, (expires_at, multiplier, event_type))
        
        self.cur.execute("""
            INSERT INTO active_events (event_type, multiplier, expires_at)
            VALUES (?, ?, ?)
        """, (event_type, multiplier, expires_at))
        
        self.conn.commit()
        print(f"üéâ –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç: {event_type} x{multiplier} –Ω–∞ {duration_seconds} —Å–µ–∫")

    def check_and_remove_expired_events(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∏–≤–µ–Ω—Ç—ã"""
        current_time = time.time()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –∏–≤–µ–Ω—Ç–∞–º–∏
        self.cur.execute("""
            SELECT COUNT(*) FROM users 
            WHERE event_expires > 0 AND event_expires <= ?
        """, (current_time,))
        
        expired_count = self.cur.fetchone()[0]
        
        if expired_count > 0:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≤–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.cur.execute("""
                UPDATE users 
                SET event_expires = 0, event_multiplier = 1.0, event_type = ''
                WHERE event_expires > 0 AND event_expires <= ?
            """, (current_time,))
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∏–≤–µ–Ω—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤
            self.cur.execute("""
                DELETE FROM active_events 
                WHERE expires_at <= ?
            """, (current_time,))
            
            self.conn.commit()
            print(f"üïí –°–±—Ä–æ—à–µ–Ω—ã –∏–≤–µ–Ω—Ç—ã –¥–ª—è {expired_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def get_active_event(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≤–µ–Ω—Ç"""
        self.cur.execute("""
            SELECT * FROM active_events 
            WHERE expires_at > ? 
            ORDER BY created_at DESC 
            LIMIT 1
        """, (time.time(),))
        
        row = self.cur.fetchone()
        return dict(row) if row else None

    def get_database_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.cur.execute("SELECT COUNT(*) FROM users")
        user_count = self.cur.fetchone()[0]
        
        self.cur.execute("SELECT SUM(bananas) FROM users")
        total_bananas = self.cur.fetchone()[0] or 0
        
        return {
            "user_count": user_count,
            "total_bananas": total_bananas,
            "database_size": os.path.getsize(self.path) if os.path.exists(self.path) else 0,
            "database_path": self.path
        }

    def backup_database(self):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        backup_path = f"{self.path}.backup"
        import shutil
        shutil.copy2(self.path, backup_path)
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path

    def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π"""
        if hasattr(self, 'conn'):
            self.conn.close()
            print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
