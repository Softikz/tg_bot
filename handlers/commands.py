# handlers/commands.py
import time
import logging
import asyncio
import hashlib
from typing import Dict

from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from storage.db import DB
from game.logic import (
    apply_offline_gain,
    cost_for_upgrade,
    effective_per_click,
    GOLD_DURATION,
    has_active_gold,
    has_active_event,
    calculate_per_click,
    calculate_per_second,
    parse_event_duration,
    get_rebirth_requirement,
    get_rebirth_reward
)

router = Router()
db = DB()
ADMIN_PASSWORD = "sm10082x3%"
ADMIN_ID = 789273255  # –í–∞—à ID
log = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_bananas_amount = State()
    waiting_for_event_type = State()
    waiting_for_event_duration = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_nickname = State()
    waiting_for_password = State()
    waiting_for_login = State()

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤
AVAILABLE_EVENTS = {
    "event_update_2x": {"name": "üéâ –ò–≤–µ–Ω—Ç –≤ —á–µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è x2", "multiplier": 2.0},
    "event_update_3x": {"name": "üéä –ò–≤–µ–Ω—Ç –≤ —á–µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è x3", "multiplier": 3.0},
    "event_update_5x": {"name": "üöÄ –ò–≤–µ–Ω—Ç –≤ —á–µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è x5", "multiplier": 5.0},
    "event_weekend_2x": {"name": "üéØ –í—ã—Ö–æ–¥–Ω–æ–π –∏–≤–µ–Ω—Ç x2", "multiplier": 2.0},
    "event_special_4x": {"name": "üíé –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–≤–µ–Ω—Ç x4", "multiplier": 4.0}
}

# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
def is_nickname_taken(nickname: str) -> bool:
    users = db.all_users()
    for user in users:
        if user.get("nickname", "").lower() == nickname.lower():
            return True
    return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
def get_user_by_nickname(nickname: str):
    users = db.all_users()
    for user in users:
        if user.get("nickname", "").lower() == nickname.lower():
            return user
    return None

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def ensure_and_update_offline(user_id: int):
    user = db.get_user(user_id)
    if not user:
        return None
    added, new_last = apply_offline_gain(user)
    if added:
        new_bananas = user.get("bananas", 0) + added
        db.update_user(user_id, bananas=new_bananas, last_update=new_last)
    return db.get_user(user_id)

def create_progress_bar(current: int, total: int, size: int = 10) -> str:
    percentage = min(100, int(current / total * 100)) if total > 0 else 100
    filled = int(size * percentage / 100)
    empty = size - filled
    return "üü©" * filled + "‚¨ú" * empty + f" {percentage}%"

def profile_text(user: Dict) -> str:
    nickname = user.get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {nickname}\n\n"
        f"üçå –ë–∞–Ω–∞–Ω—ã: {int(user['bananas'])}\n"
        f"üñ± –ó–∞ –∫–ª–∏–∫: {effective_per_click(user)}\n"
        f"‚öôÔ∏è –ü–∞—Å—Å–∏–≤–Ω–æ: {user['per_second']} / —Å–µ–∫\n"
    )
    
    boosts = []
    if has_active_gold(user):
        remaining = int(user.get("gold_expires", 0) - time.time())
        boosts.append(f"‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω (2√ó) - {remaining} —Å–µ–∫")
    
    if has_active_event(user):
        remaining = int(user.get("event_expires", 0) - time.time())
        multiplier = user.get("event_multiplier", 1.0)
        event_type = user.get("event_type", "")
        boosts.append(f"üéØ {event_type} ({multiplier}√ó) - {remaining} —Å–µ–∫")
    
    if boosts:
        text += "\n‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã:\n" + "\n".join(f"‚Ä¢ {boost}" for boost in boosts) + "\n"
    
    text += f"üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–π –≤—Å–µ–≥–æ: {user.get('rebirths', 0)}\n"
    
    upgrades = user.get("upgrades", {})
    text += f"\nüìä –£–ª—É—á—à–µ–Ω–∏—è:\n"
    text += f"‚Ä¢ –ö–ª–∏–∫: —É—Ä–æ–≤–µ–Ω—å {upgrades.get('click', 0)}\n"
    text += f"‚Ä¢ –°–±–æ—Ä—â–∏–∫: —É—Ä–æ–≤–µ–Ω—å {upgrades.get('collector', 0)}\n"
    text += f"‚Ä¢ –ó–æ–ª–æ—Ç—ã—Ö –±–∞–Ω–∞–Ω–æ–≤ –∫—É–ø–ª–µ–Ω–æ: {upgrades.get('gold', 0)}\n"
    
    return text

def shop_text(user: Dict) -> str:
    upgrades = user.get("upgrades", {})
    inventory = user.get("inventory", {})
    
    click_level = upgrades.get("click", 0)
    collector_level = upgrades.get("collector", 0)
    gold_level = upgrades.get("gold", 0)
    
    click_cost = cost_for_upgrade("click", click_level)
    collector_cost = cost_for_upgrade("collector", collector_level)
    gold_cost = cost_for_upgrade("gold", gold_level)
    
    gold_in_inventory = inventory.get("gold_banana", 0)
    
    return (
        f"üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {int(user['bananas'])} üçå\n\n"
        f"1Ô∏è‚É£ –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫ (—É—Ä–æ–≤–µ–Ω—å {click_level}) ‚Üí +1 –±–∞–Ω–∞–Ω –∑–∞ –∫–ª–∏–∫\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {click_cost} üçå\n\n"
        f"2Ô∏è‚É£ –£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä—â–∏–∫ (—É—Ä–æ–≤–µ–Ω—å {collector_level}) ‚Üí +1 –±–∞–Ω–∞–Ω/—Å–µ–∫\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {collector_cost} üçå\n\n"
        f"3Ô∏è‚É£ –ö—É–ø–∏—Ç—å –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω ‚ú® (–∫—É–ø–ª–µ–Ω–æ: {gold_level}, –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {gold_in_inventory})\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {gold_cost} üçå\n"
        f"‚ö° –≠—Ñ—Ñ–µ–∫—Ç: x2 –∫ –∫–ª–∏–∫–∞–º –Ω–∞ {GOLD_DURATION} —Å–µ–∫—É–Ω–¥\n"
        f"üì¶ –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å—Ä–∞–∑—É!"
    )

def inventory_text(user: Dict) -> str:
    inventory = user.get("inventory", {})
    
    if not inventory:
        return "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç\n\n–ö—É–ø–∏ –ó–æ–ª–æ—Ç—ã–µ –ë–∞–Ω–∞–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –ø–æ–ª—É—á–∏ –∏—Ö –∑–∞ –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏—è!"
    
    text = "üéí –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
    
    gold_bananas = inventory.get("gold_banana", 0)
    if gold_bananas > 0:
        text += f"‚ú® –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω: {gold_bananas} —à—Ç.\n"
        text += f"   ‚ö° –≠—Ñ—Ñ–µ–∫—Ç: x2 –∫ –∫–ª–∏–∫–∞–º –Ω–∞ 5 –º–∏–Ω—É—Ç\n"
        text += f"   üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: +5 –º–∏–Ω—É—Ç –∑–∞ –∫–∞–∂–¥—ã–π –±–∞–Ω–∞–Ω\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if has_active_gold(user):
            remaining = int(user.get("gold_expires", 0) - time.time())
            text += f"   ‚è∞ –ê–∫—Ç–∏–≤–Ω–æ: {remaining//60} –º–∏–Ω {remaining%60} —Å–µ–∫\n\n"
    
    text += "\nüì¶ –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è!"
    
    return text

def shop_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ± –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫", callback_data="buy_click")],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä—â–∏–∫", callback_data="buy_collector")],
        [InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω", callback_data="buy_gold")],
        [InlineKeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

def main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçå –ö–ª–∏–∫–Ω—É—Ç—å", callback_data="click"),
         InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
         InlineKeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ", callback_data="rebirth")]
    ])

def inventory_keyboard(user: Dict):
    inventory = user.get("inventory", {})
    gold_bananas = inventory.get("gold_banana", 0)
    
    buttons = []
    if gold_bananas > 0:
        buttons.append([InlineKeyboardButton(
            text=f"‚ú® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω (–µ—Å—Ç—å: {gold_bananas})", 
            callback_data="use_gold_banana"
        )])
    
    buttons.append([InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")])
    buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å –±–∞–Ω–∞–Ω—ã", callback_data="admin_give_bananas")],
        [InlineKeyboardButton(text="‚ú® –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç", callback_data="admin_start_event")],
        [InlineKeyboardButton(text="üë• –ù–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_new_users")],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_reset_data")]
    ])

def admin_back_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

def events_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for event_id, event_data in AVAILABLE_EVENTS.items():
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=event_data["name"], 
                callback_data=f"admin_event_{event_id}"
            )
        ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    return keyboard

def login_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîê –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", callback_data="login")],
        [InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
    ])

# ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==========

@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    telegram_username = message.from_user.username or "unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = db.get_user(user_id)
    
    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º telegram username
        db.update_user(user_id, telegram_username=telegram_username)
        ensure_and_update_offline(user_id)
        await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.get('nickname', '–¥—Ä—É–≥')}!\n–ù–∞–∫–ª–∏–∫–∞–π —Å–µ–±–µ –±–∞–Ω–∞–Ω—ã!", reply_markup=main_menu_keyboard())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Banana Bot!\n\n"
            "–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=login_keyboard()
        )

@router.callback_query(F.data == "register")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–≥—Ä–µ:\n\n"
        "‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏"
    )
    await state.set_state(RegistrationStates.waiting_for_nickname)
    await callback.answer()

@router.message(RegistrationStates.waiting_for_nickname)
async def process_registration_nickname(message: types.Message, state: FSMContext):
    nickname = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∏–∫–Ω–µ–π–º–∞
    if len(nickname) < 3:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(nickname) > 20:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞
    if is_nickname_taken(nickname):
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    
    await state.update_data(nickname=nickname)
    await message.answer(
        f"‚úÖ –ù–∏–∫–Ω–µ–π–º '{nickname}' —Å–≤–æ–±–æ–¥–µ–Ω!\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        f"‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
    )
    await state.set_state(RegistrationStates.waiting_for_password)

@router.message(RegistrationStates.waiting_for_password)
async def process_registration_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
    if len(password) < 6:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    nickname = data['nickname']
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    telegram_username = message.from_user.username or "unknown"
    
    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashed_password = hash_password(password)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    db.create_user_if_not_exists(user_id, telegram_username)
    db.update_user(
        user_id,
        nickname=nickname,
        password_hash=hashed_password,
        telegram_username=telegram_username
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        from main import bot
        await bot.send_message(
            ADMIN_ID,
            f"üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n"
            f"üë§ –ù–∏–∫–Ω–µ–π–º: {nickname}\n"
            f"üì± Telegram: @{telegram_username}\n"
            f"üÜî ID: {user_id}\n"
            f"üïí –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}"
        )
    except:
        pass
    
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
        f"üë§ –í–∞—à –Ω–∏–∫–Ω–µ–π–º: {nickname}\n"
        f"üîê –ü–∞—Ä–æ–ª—å: {'*' * len(password)}\n\n"
        f"üí° –ó–∞–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞!\n\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∫–ª–∏–∫–∞—Ç—å –±–∞–Ω–∞–Ω—ã, —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≤–µ–Ω—Ç–∞—Ö!",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "login")
async def start_login(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîê –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:"
    )
    await state.set_state(RegistrationStates.waiting_for_login)
    await callback.answer()

@router.message(RegistrationStates.waiting_for_login)
async def process_login_nickname(message: types.Message, state: FSMContext):
    nickname = message.text.strip()
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
    user = get_user_by_nickname(nickname)
    
    if not user:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:")
        return
    
    await state.update_data(login_nickname=nickname, user_id=user['user_id'])
    await message.answer(f"üë§ –ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {nickname}\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(RegistrationStates.waiting_for_password)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
@router.message(RegistrationStates.waiting_for_password)
async def process_login_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    
    if 'login_nickname' in data:
        # –≠—Ç–æ –≤—Ö–æ–¥ –ø–æ –ø–∞—Ä–æ–ª—é
        user_id = data['user_id']
        user = db.get_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if user.get('password_hash') == hash_password(password):
            # –û–±–Ω–æ–≤–ª—è–µ–º telegram username
            telegram_username = message.from_user.username or "unknown"
            db.update_user(user_id, telegram_username=telegram_username)
            
            await message.answer(
                f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.get('nickname', '–¥—Ä—É–≥')}!",
                reply_markup=main_menu_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        await state.clear()

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

@router.message(Command("profile"))
async def profile_command(message: types.Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
        
    user = ensure_and_update_offline(message.from_user.id)
    await message.answer(profile_text(user), reply_markup=main_menu_keyboard())

@router.message(Command("shop"))
async def shop_command(message: types.Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
        
    user = ensure_and_update_offline(message.from_user.id)
    await message.answer(shop_text(user), reply_markup=shop_keyboard())

@router.message(Command("inventory"))
async def inventory_command(message: types.Message):
    user = db.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
        
    user = ensure_and_update_offline(message.from_user.id)
    await message.answer(inventory_text(user), reply_markup=inventory_keyboard(user))

# ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========

@router.message(Command("admin"))
async def admin_command(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–ø–∞—Ä–æ–ª—å>")
        return
    
    password = message.text.split()[1]
    if password != ADMIN_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    await message.answer("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard())

# ========== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

@router.callback_query(F.data == "click")
async def handle_click(callback: CallbackQuery):
    await callback.answer()
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    per_click = effective_per_click(user)
    
    new_bananas = user['bananas'] + per_click
    db.update_user(callback.from_user.id, bananas=new_bananas, last_update=time.time())
    
    user = db.get_user(callback.from_user.id)
    
    text = (
        f"üçå –ö–ª–∏–∫! +{per_click}\n\n"
        f"–í—Å–µ–≥–æ: {int(user['bananas'])} üçå\n"
        f"–ó–∞ –∫–ª–∏–∫: {effective_per_click(user)}\n"
        f"–ü–∞—Å—Å–∏–≤: {user['per_second']}/—Å–µ–∫\n"
    )
    
    boosts = []
    if has_active_gold(user):
        remaining = int(user.get("gold_expires", 0) - time.time())
        boosts.append(f"‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω (2√ó)")
    
    if has_active_event(user):
        remaining = int(user.get("event_expires", 0) - time.time())
        multiplier = user.get("event_multiplier", 1.0)
        event_type = user.get("event_type", "")
        boosts.append(f"üéØ {event_type} ({multiplier}√ó)")
    
    if boosts:
        text += "‚ö° " + " + ".join(boosts) + "\n"
    
    await callback.message.edit_text(text, reply_markup=main_menu_keyboard())

@router.callback_query(F.data == "profile")
async def handle_profile(callback: CallbackQuery):
    await callback.answer()
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    await callback.message.edit_text(profile_text(user), reply_markup=main_menu_keyboard())

@router.callback_query(F.data == "shop")
async def handle_shop(callback: CallbackQuery):
    await callback.answer()
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    await callback.message.edit_text(shop_text(user), reply_markup=shop_keyboard())

@router.callback_query(F.data == "inventory")
async def handle_inventory(callback: CallbackQuery):
    await callback.answer()
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    await callback.message.edit_text(inventory_text(user), reply_markup=inventory_keyboard(user))

@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())

@router.callback_query(F.data == "use_gold_banana")
async def handle_use_gold_banana(callback: CallbackQuery):
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if db.use_from_inventory(callback.from_user.id, "gold_banana", 1):
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        current_expires = user.get("gold_expires", 0)
        current_time = time.time()
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        if current_expires < current_time:
            new_expires = current_time + GOLD_DURATION
        else:
            # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
            new_expires = current_expires + GOLD_DURATION
        
        db.update_user(callback.from_user.id, gold_expires=new_expires)
        
        remaining = db.get_inventory(callback.from_user.id).get("gold_banana", 0)
        remaining_time = int(new_expires - current_time)
        
        await callback.answer(
            f"‚úÖ –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +5 –º–∏–Ω—É—Ç –±—É—Å—Ç–∞.\n"
            f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {remaining_time//60} –º–∏–Ω {remaining_time%60} —Å–µ–∫\n"
            f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {remaining}", 
            show_alert=True
        )
        
        user = db.get_user(callback.from_user.id)
        await callback.message.edit_text(inventory_text(user), reply_markup=inventory_keyboard(user))
    else:
        await callback.answer("‚ùå –ù–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –±–∞–Ω–∞–Ω–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!", show_alert=True)

# –ü–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤—ã ensure_and_update_offline)
@router.callback_query(F.data == "buy_click")
async def handle_buy_click(callback: CallbackQuery):
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

@router.callback_query(F.data == "buy_collector")
async def handle_buy_collector(callback: CallbackQuery):
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

@router.callback_query(F.data == "buy_gold")
async def handle_buy_gold(callback: CallbackQuery):
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# ========== –ü–ï–†–ï–†–û–ñ–î–ï–ù–ò–ï ==========

@router.callback_query(F.data == "rebirth")
async def handle_rebirth(callback: CallbackQuery):
    await callback.answer()
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

@router.callback_query(F.data == "confirm_rebirth")
async def handle_confirm_rebirth(callback: CallbackQuery):
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    user = ensure_and_update_offline(callback.from_user.id)
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# ========== –ê–î–ú–ò–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_commands(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    action = callback.data
    
    if action == "admin_stats":
        users = db.all_users()
        total_users = len(users)
        total_bananas = sum(user.get("bananas", 0) for user in users)
        total_rebirths = sum(user.get("rebirths", 0) for user in users)
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        new_users = 0
        for user in users:
            if user.get("last_update", 0) > time.time() - 86400:
                new_users += 1
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 24—á: {new_users}\n"
            f"üçå –í—Å–µ–≥–æ –±–∞–Ω–∞–Ω–æ–≤: {total_bananas}\n"
            f"üîÅ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–π: {total_rebirths}\n"
            f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        await callback.message.edit_text(stats_text, reply_markup=admin_back_keyboard())
        await callback.answer()
        
    elif action == "admin_give_bananas":
        await callback.message.edit_text(
            "üéÅ –í—ã–¥–∞—á–∞ –±–∞–Ω–∞–Ω–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–¥–∞—á–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_give_single")],
                [InlineKeyboardButton(text="üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_give_all")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        await callback.answer()
        
    elif action == "admin_give_single":
        await callback.message.edit_text(
            "üë§ –í—ã–¥–∞—á–∞ –±–∞–Ω–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        await state.set_state(AdminStates.waiting_for_username)
        await callback.answer()
        
    elif action == "admin_give_all":
        await callback.message.edit_text(
            "üë• –í—ã–¥–∞—á–∞ –±–∞–Ω–∞–Ω–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∞–Ω–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤—Å–µ–º:"
        )
        await state.set_state(AdminStates.waiting_for_bananas_amount)
        await state.update_data(give_all=True)
        await callback.answer()
        
    elif action == "admin_start_event":
        await callback.message.edit_text(
            "‚ú® –ó–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≤–µ–Ω—Ç–∞:",
            reply_markup=events_keyboard()
        )
        await callback.answer()
        
    elif action == "admin_new_users":
        users = db.all_users()
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        users.sort(key=lambda x: x.get("last_update", 0), reverse=True)
        
        new_users_text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
        count = 0
        for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            nickname = user.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            telegram_username = user.get("telegram_username", "unknown")
            user_id = user.get("user_id")
            reg_time = time.strftime('%Y-%m-%d %H:%M', time.localtime(user.get("last_update", time.time())))
            new_users_text += f"üë§ {nickname} (@{telegram_username})\nüÜî ID: {user_id}\nüïí {reg_time}\n\n"
            count += 1
        
        if count == 0:
            new_users_text = "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
        await callback.message.edit_text(new_users_text, reply_markup=admin_back_keyboard())
        await callback.answer()
        
    elif action == "admin_reset_data":
        # –û–ø–∞—Å–Ω–æ! –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –î–ê, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="admin_confirm_reset")],
            [InlineKeyboardButton(text="‚úÖ –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
        await callback.message.edit_text(
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard
        )
        await callback.answer()
        
    elif action == "admin_back":
        await callback.message.edit_text("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard())
        await callback.answer()
        
    elif action.startswith("admin_event_"):
        event_id = action.replace("admin_event_", "")
        event_data = AVAILABLE_EVENTS.get(event_id)
        
        if event_data:
            await callback.message.edit_text(
                f"üéØ –ó–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞: {event_data['name']}\n\n"
                f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{event_data['multiplier']}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≤–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2:30 –¥–ª—è 2 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç):"
            )
            await state.set_state(AdminStates.waiting_for_event_duration)
            await state.update_data(event_id=event_id, event_data=event_data)
            await callback.answer()

@router.callback_query(F.data == "admin_confirm_reset")
async def handle_admin_confirm_reset(callback: CallbackQuery):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.all_users()
    for user in users:
        db.update_user(
            user["user_id"],
            bananas=0,
            per_click=1,
            per_second=0,
            upgrades={},
            rebirths=0,
            inventory={},
            gold_expires=0
        )
    
    await callback.message.edit_text(
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã!",
        reply_markup=admin_keyboard()
    )
    await callback.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!", show_alert=True)

# ========== –ê–î–ú–ò–ù STATES –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

@router.message(AdminStates.waiting_for_username)
async def process_admin_username(message: types.Message, state: FSMContext):
    nickname = message.text.strip()
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
    target_user = get_user_by_nickname(nickname)
    
    if not target_user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(target_user_id=target_user["user_id"], target_nickname=target_user["nickname"])
    await message.answer(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user['nickname']}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∞–Ω–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏:")
    await state.set_state(AdminStates.waiting_for_bananas_amount)

@router.message(AdminStates.waiting_for_bananas_amount)
async def process_admin_bananas_amount(message: types.Message, state: FSMContext):
    try:
        bananas = int(message.text)
        if bananas <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∞–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        data = await state.get_data()
        
        if data.get("give_all"):
            # –í—ã–¥–∞–µ–º –±–∞–Ω–∞–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users = db.all_users()
            for user in users:
                current_bananas = user.get("bananas", 0)
                db.update_user(user["user_id"], bananas=current_bananas + bananas)
            
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {bananas} üçå –≤—Å–µ–º {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
                reply_markup=admin_keyboard()
            )
        else:
            # –í—ã–¥–∞–µ–º –±–∞–Ω–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            target_user_id = data["target_user_id"]
            target_nickname = data["target_nickname"]
            
            user = db.get_user(target_user_id)
            current_bananas = user.get("bananas", 0)
            db.update_user(target_user_id, bananas=current_bananas + bananas)
            
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {bananas} üçå –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_nickname}!",
                reply_markup=admin_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                from main import bot
                await bot.send_message(
                    target_user_id,
                    f"üéÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º {bananas} üçå!\n\n"
                    f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {current_bananas + bananas} –±–∞–Ω–∞–Ω–æ–≤"
                )
            except:
                pass
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")

@router.message(AdminStates.waiting_for_event_duration)
async def process_admin_event_duration(message: types.Message, state: FSMContext):
    try:
        duration_str = message.text.strip()
        duration_seconds = parse_event_duration(duration_str)
        
        data = await state.get_data()
        event_id = data["event_id"]
        event_data = data["event_data"]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≤–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.start_event_for_all_users(
            event_data["name"],
            event_data["multiplier"],
            duration_seconds
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.all_users()
        notified = 0
        from main import bot
        
        for user in users:
            try:
                await bot.send_message(
                    user["user_id"],
                    f"üéâ {event_data['name']}!\n\n"
                    f"‚ö° –ú–Ω–æ–∂–∏—Ç–µ–ª—å –±–∞–Ω–∞–Ω–æ–≤: x{event_data['multiplier']}\n"
                    f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
                    f"–£—Å–ø–µ–π –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –±–∞–Ω–∞–Ω–æ–≤! üçå"
                )
                notified += 1
            except:
                continue
        
        await message.answer(
            f"‚úÖ –ò–≤–µ–Ω—Ç '{event_data['name']}' –∑–∞–ø—É—â–µ–Ω!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{event_data['multiplier']}\n"
            f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {notified}/{len(users)}",
            reply_markup=admin_keyboard()
        )
        
        await state.clear()
        
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã':")
