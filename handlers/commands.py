# handlers/commands.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
import asyncio
import logging
from typing import Dict

from storage.db import DB
from game.logic import (
    apply_offline_gain,
    cost_for_upgrade,
    effective_per_click,
    GOLD_DURATION,
    has_active_gold
)

router = Router()
db = DB()
ADMIN_PASSWORD = "sm10082x3%"
log = logging.getLogger(__name__)


def ensure_and_update_offline(user_id: int, username: str):
    db.create_user_if_not_exists(user_id, username)
    user = db.get_user(user_id)
    added, new_last = apply_offline_gain(user)
    if added:
        new_bananas = user.get("bananas", 0) + added
        db.update_user(user_id, bananas=new_bananas, last_update=new_last)
    return db.get_user(user_id)


def profile_text(user: Dict) -> str:
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['username']}\n\n"
        f"üçå –ë–∞–Ω–∞–Ω—ã: {user['bananas']}\n"
        f"üñ± –ó–∞ –∫–ª–∏–∫: {user['per_click']}\n"
        f"‚öôÔ∏è –ü–∞—Å—Å–∏–≤–Ω–æ: {user['per_second']} / —Å–µ–∫\n"
    )
    if has_active_gold(user):
        text += "‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω!\n"
    return text


def shop_text(user: Dict) -> str:
    return (
        f"üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['bananas']} üçå\n"
        f"1Ô∏è‚É£ –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫ (+1) ‚Äî {cost_for_upgrade('click', user['upgrades'].get('click', 0))} üçå\n"
        f"2Ô∏è‚É£ –£–ª—É—á—à–∏—Ç—å –ø–∞—Å—Å–∏–≤ (+1/—Å–µ–∫) ‚Äî {cost_for_upgrade('collector', user['upgrades'].get('collector', 0))} üçå\n"
        f"3Ô∏è‚É£ –ö—É–ø–∏—Ç—å –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω ‚ú® ‚Äî {cost_for_upgrade('gold', user['upgrades'].get('gold', 0))} üçå\n"
    )


def shop_keyboard(user: Dict):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ± –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫", callback_data="buy_click")],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä—â–∏–∫", callback_data="buy_collector")],
        [InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω", callback_data="buy_gold")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="profile")]
    ])


def main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçå –ö–ª–∏–∫–Ω—É—Ç—å", callback_data="click")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
    ])


# === –ö–æ–º–∞–Ω–¥—ã ===

@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    ensure_and_update_offline(user_id, username)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Banana Bot!\n–ù–∞–∫–ª–∏–∫–∞–π —Å–µ–±–µ –±–∞–Ω–∞–Ω—ã!", reply_markup=main_menu_keyboard())


@router.message(Command("admin"))
async def admin_command(message: types.Message):
    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–ø–∞—Ä–æ–ª—å> <–∫–æ–ª-–≤–æ –±–∞–Ω–∞–Ω–æ–≤>")
        return

    _, password, amount = args
    if password != ADMIN_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    try:
        amount = int(amount)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user = db.get_user(message.from_user.id)
    db.update_user(message.from_user.id, bananas=user["bananas"] + amount)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} üçå\n–ë–∞–ª–∞–Ω—Å: {user['bananas'] + amount} üçå")


# === Callback –∫–Ω–æ–ø–∫–∏ ===

@router.callback_query(F.data == "click")
async def cb_click(query: CallbackQuery):
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    per_click = effective_per_click(user)
    db.update_user(query.from_user.id, bananas=user['bananas'] + per_click, last_update=time.time())
    user = db.get_user(query.from_user.id)
    text = f"üçå +{per_click} | –í—Å–µ–≥–æ: {user['bananas']} üçå"
    await query.message.edit_text(text, reply_markup=main_menu_keyboard())


@router.callback_query(F.data == "shop")
async def cb_shop(query: CallbackQuery):
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))


@router.callback_query(F.data.in_({"buy_click", "buy_collector", "buy_gold"}))
async def cb_buy_upgrade(query: CallbackQuery):
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    upgrades = user.get("upgrades", {})
    kind = query.data.replace("buy_", "")
    level = upgrades.get(kind, 0)
    cost = cost_for_upgrade(kind, level)

    if user["bananas"] < cost:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–Ω–∞–Ω–æ–≤!", show_alert=True)
        return

    new_bananas = user["bananas"] - cost
    upgrades[kind] = level + 1

    if kind == "click":
        db.update_user(query.from_user.id, bananas=new_bananas, per_click=user["per_click"] + 1, upgrades=upgrades)
    elif kind == "collector":
        db.update_user(query.from_user.id, bananas=new_bananas, per_second=user["per_second"] + 1, upgrades=upgrades)
    elif kind == "gold":
        db.update_user(query.from_user.id, bananas=new_bananas, gold_expires=time.time() + GOLD_DURATION, upgrades=upgrades)

    user = db.get_user(query.from_user.id)
    await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))


@router.callback_query(F.data == "profile")
async def cb_profile(query: CallbackQuery):
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    await query.message.edit_text(profile_text(user), reply_markup=main_menu_keyboard())


# === DEBUG ===

@router.callback_query()
async def _debug_unhandled_callback(query: CallbackQuery):
    log.info(f"‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {query.data}")
    await query.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}", show_alert=False)


@router.message()
async def _debug_unhandled_message(message: types.Message):
    log.info(f"‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
