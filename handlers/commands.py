# handlers/commands.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
import asyncio
import logging
from typing import Dict

from storage.db import DB
from game.logic import (
    apply_offline_gain,
    cost_for_upgrade,
    effective_per_click,
    GOLD_DURATION,
    has_active_gold,
    calculate_per_click,
    calculate_per_second
)

router = Router()
db = DB()
ADMIN_PASSWORD = "sm10082x3%"
log = logging.getLogger(__name__)


def ensure_and_update_offline(user_id: int, username: str):
    db.create_user_if_not_exists(user_id, username)
    user = db.get_user(user_id)
    if not user:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î")
    added, new_last = apply_offline_gain(user)
    if added:
        new_bananas = user.get("bananas", 0) + added
        db.update_user(user_id, bananas=new_bananas, last_update=new_last)
    return db.get_user(user_id)


def profile_text(user: Dict) -> str:
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['username']}\n\n"
        f"üçå –ë–∞–Ω–∞–Ω—ã: {int(user['bananas'])}\n"
        f"üñ± –ó–∞ –∫–ª–∏–∫: {effective_per_click(user)} (–±–∞–∑–∞: {user['per_click']})\n"
        f"‚öôÔ∏è –ü–∞—Å—Å–∏–≤–Ω–æ: {user['per_second']} / —Å–µ–∫\n"
    )
    if has_active_gold(user):
        remaining = int(user.get("gold_expires", 0) - time.time())
        text += f"‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω! ({remaining} —Å–µ–∫)\n"
    text += f"üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–π: {user.get('rebirths', 0)}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    upgrades = user.get("upgrades", {})
    text += f"\nüìä –£–ª—É—á—à–µ–Ω–∏—è:\n"
    text += f"‚Ä¢ –ö–ª–∏–∫: —É—Ä–æ–≤–µ–Ω—å {upgrades.get('click', 0)}\n"
    text += f"‚Ä¢ –°–±–æ—Ä—â–∏–∫: —É—Ä–æ–≤–µ–Ω—å {upgrades.get('collector', 0)}\n"
    text += f"‚Ä¢ –ó–æ–ª–æ—Ç—ã—Ö –±–∞–Ω–∞–Ω–æ–≤ –∫—É–ø–ª–µ–Ω–æ: {upgrades.get('gold', 0)}\n"
    
    return text


def shop_text(user: Dict) -> str:
    upgrades = user.get("upgrades", {})
    
    click_level = upgrades.get("click", 0)
    collector_level = upgrades.get("collector", 0)
    gold_level = upgrades.get("gold", 0)
    
    click_cost = cost_for_upgrade("click", click_level)
    collector_cost = cost_for_upgrade("collector", collector_level)
    gold_cost = cost_for_upgrade("gold", gold_level)
    
    return (
        f"üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {int(user['bananas'])} üçå\n\n"
        f"1Ô∏è‚É£ –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫ (—É—Ä–æ–≤–µ–Ω—å {click_level}) ‚Üí +1 –±–∞–Ω–∞–Ω –∑–∞ –∫–ª–∏–∫\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {click_cost} üçå\n\n"
        f"2Ô∏è‚É£ –£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä—â–∏–∫ (—É—Ä–æ–≤–µ–Ω—å {collector_level}) ‚Üí +1 –±–∞–Ω–∞–Ω/—Å–µ–∫\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {collector_cost} üçå\n\n"
        f"3Ô∏è‚É£ –ö—É–ø–∏—Ç—å –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω ‚ú® (–∫—É–ø–ª–µ–Ω–æ: {gold_level})\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {gold_cost} üçå\n"
        f"‚ö° –≠—Ñ—Ñ–µ–∫—Ç: x2 –∫ –∫–ª–∏–∫–∞–º –Ω–∞ {GOLD_DURATION} —Å–µ–∫—É–Ω–¥\n"
    )


def shop_keyboard(user: Dict):
    upgrades = user.get("upgrades", {})
    
    click_level = upgrades.get("click", 0)
    collector_level = upgrades.get("collector", 0)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üñ± –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫ (—É—Ä. {click_level})", callback_data="buy_click")],
        [InlineKeyboardButton(text=f"‚öôÔ∏è –£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä—â–∏–∫ (—É—Ä. {collector_level})", callback_data="buy_collector")],
        [InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω", callback_data="buy_gold")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ", callback_data="rebirth")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])


def main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçå –ö–ª–∏–∫–Ω—É—Ç—å", callback_data="click"),
         InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
         InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ", callback_data="rebirth")]
    ])


# === –ö–æ–º–∞–Ω–¥—ã ===

@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    ensure_and_update_offline(user_id, username)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Banana Bot!\n–ù–∞–∫–ª–∏–∫–∞–π —Å–µ–±–µ –±–∞–Ω–∞–Ω—ã!", reply_markup=main_menu_keyboard())


@router.message(Command("admin"))
async def admin_command(message: types.Message):
    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–ø–∞—Ä–æ–ª—å> <–∫–æ–ª-–≤–æ –±–∞–Ω–∞–Ω–æ–≤>")
        return

    _, password, amount = args
    if password != ADMIN_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    try:
        amount = int(amount)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user = db.get_user(message.from_user.id)
    db.update_user(message.from_user.id, bananas=user["bananas"] + amount)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} üçå\n–ë–∞–ª–∞–Ω—Å: {user['bananas'] + amount} üçå")


@router.message(Command("profile"))
async def profile_command(message: types.Message):
    user = ensure_and_update_offline(message.from_user.id, message.from_user.username)
    await message.answer(profile_text(user), reply_markup=main_menu_keyboard())


@router.message(Command("shop"))
async def shop_command(message: types.Message):
    user = ensure_and_update_offline(message.from_user.id, message.from_user.username)
    await message.answer(shop_text(user), reply_markup=shop_keyboard(user))


# === Callback –∫–Ω–æ–ø–∫–∏ ===

@router.callback_query(F.data == "click")
async def cb_click(query: CallbackQuery):
    await query.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    per_click = effective_per_click(user)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∞–Ω—ã –∑–∞ –∫–ª–∏–∫
    new_bananas = user['bananas'] + per_click
    db.update_user(query.from_user.id, bananas=new_bananas, last_update=time.time())
    
    user = db.get_user(query.from_user.id)
    text = (
        f"üçå –ö–ª–∏–∫! +{per_click}\n\n"
        f"–í—Å–µ–≥–æ: {int(user['bananas'])} üçå\n"
        f"–ó–∞ –∫–ª–∏–∫: {effective_per_click(user)} (–±–∞–∑–∞: {user['per_click']})\n"
        f"–ü–∞—Å—Å–∏–≤: {user['per_second']}/—Å–µ–∫\n"
    )
    if has_active_gold(user):
        remaining = int(user.get("gold_expires", 0) - time.time())
        text += f"‚ú® –ê–∫—Ç–∏–≤–µ–Ω –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω (2√ó) - {remaining} —Å–µ–∫\n"
    
    await query.message.edit_text(text, reply_markup=main_menu_keyboard())


@router.callback_query(F.data == "shop")
async def cb_shop(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))


@router.callback_query(F.data == "profile")
async def cb_profile(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    await query.message.edit_text(profile_text(user), reply_markup=main_menu_keyboard())


@router.callback_query(F.data == "back_to_main")
async def cb_back_to_main(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    await query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())


@router.callback_query(F.data.in_({"buy_click", "buy_collector", "buy_gold"}))
async def cb_buy_upgrade(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    upgrades = user.get("upgrades", {}) or {}
    kind = query.data.replace("buy_", "")
    level = upgrades.get(kind, 0)

    try:
        cost = cost_for_upgrade(kind, level)
    except Exception as e:
        await query.answer(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}", show_alert=True)
        return

    if user["bananas"] < cost:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–Ω–∞–Ω–æ–≤!", show_alert=True)
        return

    # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    new_bananas = user["bananas"] - cost
    new_upgrades = upgrades.copy()
    new_upgrades[kind] = level + 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–ª—É—á—à–µ–Ω–∏—è
    if kind == "click":
        new_per_click = calculate_per_click(new_upgrades)
        db.update_user(
            query.from_user.id, 
            bananas=new_bananas, 
            per_click=new_per_click, 
            upgrades=new_upgrades
        )
        await query.answer(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–∫–∞ –∫—É–ø–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å {level + 1}", show_alert=True)
        
    elif kind == "collector":
        new_per_second = calculate_per_second(new_upgrades)
        db.update_user(
            query.from_user.id, 
            bananas=new_bananas, 
            per_second=new_per_second, 
            upgrades=new_upgrades
        )
        await query.answer(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ —Å–±–æ—Ä—â–∏–∫–∞ –∫—É–ø–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å {level + 1}", show_alert=True)
        
    elif kind == "gold":
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω
        gold_expires = time.time() + GOLD_DURATION
        db.update_user(
            query.from_user.id, 
            bananas=new_bananas, 
            gold_expires=gold_expires, 
            upgrades=new_upgrades
        )
        await query.answer(f"‚úÖ –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +x2 –∫ –∫–ª–∏–∫–∞–º –Ω–∞ {GOLD_DURATION} —Å–µ–∫—É–Ω–¥", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    user = db.get_user(query.from_user.id)
    await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))


# --- –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ (rebirth) ---
REQUIREMENTS = [
    {"bananas": 500, "gold": 0},
    {"bananas": 1000, "gold": 1},
]

@router.callback_query(F.data == "rebirth")
async def rebirth_prompt(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    rebirth_count = user.get("rebirths", 0)
    req = REQUIREMENTS[min(rebirth_count, len(REQUIREMENTS)-1)]
    collected = user["bananas"]
    total_needed = req["bananas"]
    progress_percent = min(100, int(collected / total_needed * 100)) if total_needed > 0 else 100
    filled = int(progress_percent / 10)
    empty = 10 - filled
    bar = "üü©"*filled + "‚¨ú"*empty

    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü–µ—Ä–µ—Ä–æ–¥–∏—Ç—å—Å—è", callback_data="confirm_rebirth")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")

    await query.message.edit_text(
        f"üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ\n\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {rebirth_count}\n"
        f"–°–æ–±—Ä–∞–Ω–æ –±–∞–Ω–∞–Ω–æ–≤: {int(collected)}/{total_needed}\n"
        f"{bar} {progress_percent}%\n\n"
        f"–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–æ–ª–æ—Ç—ã—Ö –±–∞–Ω–∞–Ω–æ–≤: {req.get('gold',0)}\n\n"
        f"‚ö†Ô∏è –ü—Ä–∏ –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–∏ –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, –Ω–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã!",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "confirm_rebirth")
async def confirm_rebirth(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    rebirth_count = user.get("rebirths", 0)
    req = REQUIREMENTS[min(rebirth_count, len(REQUIREMENTS)-1)]

    if user["bananas"] < req["bananas"] or user.get("upgrades", {}).get("gold", 0) < req.get("gold", 0):
        await query.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–Ω–∞–Ω–æ–≤ –∏–ª–∏ –∑–æ–ª–æ—Ç—ã—Ö –±–∞–Ω–∞–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏—è.", show_alert=True)
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–π
    db.update_user(
        query.from_user.id, 
        bananas=0, 
        per_click=1, 
        per_second=0, 
        upgrades={},
        rebirths=rebirth_count + 1
    )

    await query.message.edit_text(
        f"üåü –í—ã –ø–µ—Ä–µ—Ä–æ–¥–∏–ª–∏—Å—å! –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏—è: {rebirth_count + 1}\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω, –Ω–æ –≤—ã —Å—Ç–∞–ª–∏ —Å–∏–ª—å–Ω–µ–µ!",
        reply_markup=main_menu_keyboard()
    )


# === DEBUG: –ª–æ–≤–∏–º –≤—Å–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback'–∏ ===
@router.callback_query()
async def _debug_unhandled_callback(query: CallbackQuery):
    try:
        await query.answer()  # –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —Å–ø–∏–Ω–Ω–µ—Ä –∏—Å—á–µ–∑
    except Exception:
        pass
    log.info("‚ö†Ô∏è Unhandled callback_query received. from=%s data=%s message_id=%s",
             query.from_user.id, query.data, getattr(query.message, "message_id", None))


@router.message()
async def _debug_unhandled_message(message: types.Message):
    log.info("‚ö†Ô∏è Unhandled message: from=%s text=%s", message.from_user.id, message.text)
