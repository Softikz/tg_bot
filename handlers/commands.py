# handlers/commands.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
import asyncio
from typing import Dict

from storage.db import DB
from game.logic import (
    apply_offline_gain,
    cost_for_upgrade,
    effective_per_click,
    GOLD_DURATION,
    has_active_gold
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
router = Router()
db = DB()
ADMIN_PASSWORD = "sm10082x3%"  # –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def ensure_and_update_offline(user_id: int, username: str):
    db.create_user_if_not_exists(user_id, username)
    user = db.get_user(user_id)
    if not user:
        raise RuntimeError("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    apply_offline_gain(user)  # –ø–µ—Ä–µ–¥–∞—ë–º user
    return db.get_user(user_id)


def profile_text(user: Dict) -> str:
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['username']}\n\n"
        f"üçå –ë–∞–Ω–∞–Ω—ã: {user['bananas']}\n"
        f"üñ± –ó–∞ –∫–ª–∏–∫: {user['per_click']}\n"
        f"‚öôÔ∏è –ü–∞—Å—Å–∏–≤–Ω–æ: {user['per_second']} / —Å–µ–∫\n"
    )
    if has_active_gold(user):
        text += "‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω!\n"
    return text


def shop_text(user: Dict) -> str:
    return (
        f"üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['bananas']} üçå\n"
        f"1Ô∏è‚É£ –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫–∏ (+1) ‚Äî {cost_for_upgrade('click', user['upgrades'].get('click', 0))} üçå\n"
        f"2Ô∏è‚É£ –£–ª—É—á—à–∏—Ç—å –ø–∞—Å—Å–∏–≤ (+1/—Å–µ–∫) ‚Äî {cost_for_upgrade('collector', user['upgrades'].get('collector', 0))} üçå\n"
        f"3Ô∏è‚É£ –ö—É–ø–∏—Ç—å –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω ‚ú® ‚Äî {cost_for_upgrade('gold', user['upgrades'].get('gold', 0))} üçå\n"
    )


def shop_keyboard(user: Dict):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ± –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫", callback_data="buy_click")],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ª—É—á—à–∏—Ç—å —Å–±–æ—Ä—â–∏–∫", callback_data="buy_collector")],
        [InlineKeyboardButton(text="‚ú® –ö—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω", callback_data="buy_gold")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ", callback_data="rebirth")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="profile")]
    ])


# --- –ö–æ–º–∞–Ω–¥—ã ---
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    ensure_and_update_offline(user_id, username)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçå –ö–ª–∏–∫–Ω—É—Ç—å", callback_data="click")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ", callback_data="rebirth")]
    ])
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Banana Bot!\n–ù–∞–∫–ª–∏–∫–∞–π —Å–µ–±–µ –±–∞–Ω–∞–Ω—ã!", reply_markup=kb)


@router.message(Command("admin"))
async def admin_command(message: types.Message):
    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–ø–∞—Ä–æ–ª—å> <–∫–æ–ª-–≤–æ –±–∞–Ω–∞–Ω–æ–≤>")
        return

    _, password, amount = args
    if password != ADMIN_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    try:
        amount = int(amount)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∞–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    db.update_user(message.from_user.id,
                   bananas=db.get_user(message.from_user.id)['bananas'] + amount)
    user = db.get_user(message.from_user.id)
    await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} üçå\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['bananas']} üçå")


@router.message(Command("profile"))
async def profile_command(message: types.Message):
    user = ensure_and_update_offline(message.from_user.id, message.from_user.username)
    await message.answer(profile_text(user))


@router.message(Command("shop"))
async def shop_command(message: types.Message):
    user = ensure_and_update_offline(message.from_user.id, message.from_user.username)
    await message.answer(shop_text(user), reply_markup=shop_keyboard(user))


# --- Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã ---
@router.callback_query(F.data == "click")
async def cb_click(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    per_click = effective_per_click(user)
    db.update_user(query.from_user.id, bananas=user['bananas'] + per_click, last_update=time.time())
    user = db.get_user(query.from_user.id)

    text = (
        f"üçå –ö–ª–∏–∫! +{per_click}\n\n"
        f"–í—Å–µ–≥–æ: {user['bananas']} üçå\n"
        f"–ó–∞ –∫–ª–∏–∫: {user['per_click']}\n"
        f"–ü–∞—Å—Å–∏–≤: {user['per_second']}/—Å–µ–∫\n"
    )
    if has_active_gold(user):
        text += "‚ú® –ê–∫—Ç–∏–≤–µ–Ω –ó–æ–ª–æ—Ç–æ–π –ë–∞–Ω–∞–Ω (2√ó)\n"
    await query.message.edit_text(text, reply_markup=query.message.reply_markup)


@router.callback_query(F.data == "shop")
async def cb_shop(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))


@router.callback_query(F.data == "profile")
async def cb_profile(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    await query.message.edit_text(profile_text(user))


# --- –ü–æ–∫—É–ø–∫–∏ ---
@router.callback_query(F.data.startswith("buy_"))
async def cb_buy(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    kind = query.data[4:]
    lvl = user['upgrades'].get(kind if kind != "gold" else "gold", 0)
    cost = cost_for_upgrade(kind, lvl)
    if user['bananas'] < cost:
        await query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–Ω–∞–Ω–æ–≤ üò¢")
        return
    update_kwargs = {"bananas": user['bananas'] - cost}
    if kind == "click":
        update_kwargs["per_click"] = user['per_click'] + 1
    elif kind == "collector":
        update_kwargs["per_second"] = user['per_second'] + 1
    elif kind == "gold":
        gold_expires = max(time.time(), user.get("gold_expires", 0)) + GOLD_DURATION
        update_kwargs["gold_expires"] = gold_expires
        await query.message.answer(f"‚ú® –ó–æ–ª–æ—Ç–æ–π –±–∞–Ω–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {time.ctime(int(gold_expires))}")
    upgrades = user['upgrades'].copy()
    upgrades[kind] = lvl + 1
    update_kwargs["upgrades"] = upgrades
    db.update_user(query.from_user.id, **update_kwargs)
    user = db.get_user(query.from_user.id)
    await query.message.edit_text(shop_text(user), reply_markup=shop_keyboard(user))


# --- –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ ---
REQUIREMENTS = [
    {"bananas": 500, "gold": 0},   # –ø–µ—Ä–≤–æ–µ –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ
    {"bananas": 1000, "gold": 1},  # –≤—Ç–æ—Ä–æ–µ –∏ –¥–∞–ª–µ–µ
]

@router.callback_query(F.data == "rebirth")
async def rebirth_prompt(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    rebirth_count = user.get("rebirths", 0)
    req = REQUIREMENTS[min(rebirth_count, len(REQUIREMENTS)-1)]
    collected = user["bananas"]
    total_needed = req["bananas"]
    progress_percent = min(100, int(collected / total_needed * 100))
    filled = int(progress_percent / 10)
    empty = 10 - filled
    bar = "üü©"*filled + "‚¨ú"*empty

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ—Ä–æ–¥–∏—Ç—å—Å—è", callback_data="confirm_rebirth")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="profile")

    await query.message.edit_text(
        f"üîÅ –ü–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ\n\n"
        f"–í—Å–µ–≥–æ –±–∞–Ω–∞–Ω–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {collected}/{total_needed}\n"
        f"{bar} {progress_percent}%",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "confirm_rebirth")
async def confirm_rebirth(query: CallbackQuery):
    await query.answer()
    user = ensure_and_update_offline(query.from_user.id, query.from_user.username)
    rebirth_count = user.get("rebirths", 0)
    req = REQUIREMENTS[min(rebirth_count, len(REQUIREMENTS)-1)]

    if user["bananas"] < req["bananas"] or user.get("upgrades", {}).get("gold", 0) < req.get("gold", 0):
        await query.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–Ω–∞–Ω–æ–≤ –∏–ª–∏ –∑–æ–ª–æ—Ç—ã—Ö –±–∞–Ω–∞–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏—è.")
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–Ω–∞–Ω—ã –∏ –∑–æ–ª–æ—Ç–æ
    new_upgrades = user["upgrades"].copy()
    if req.get("gold",0) > 0:
        new_upgrades["gold"] -= req["gold"]
    db.update_user(query.from_user.id, bananas=0, per_click=1, per_second=0, upgrades=new_upgrades)
    db.update_user(query.from_user.id, rebirths=rebirth_count+1)

    await query.message.answer("üåü –í—ã –ø–µ—Ä–µ—Ä–æ–¥–∏–ª–∏—Å—å! –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞.")
